dir.exists(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
file.path("mytest3.R", "folder1", "folder2")
info()
file.path( "folder1", "folder2")
?dir.create
dir.create("testdir2", recursive = T)
dir.create(file.path("testdir2","testdir3"), recursive = T)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
swirl()
1:20
pi:10
15:1
?":"
seq(1,10)
seq(1,20)
seq(0,10, by=0.5)
seq(0,10, by=0.33)
seq(0,10, 0.33)
seq(0,10, length=30)
my_seq<-seq(0,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq(1)
seq(length=10)
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5, 55, -10, 6)
num_vect<1
tf<-num_vect<1
tf
tf2<-num_vect>=6
num_vect>=6
my_char<c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Pranjit")
i<-20
x<-c(i, "R")
paste(x, collapse = ".")
my_name
my_name<-c(my_name,"Pranjit")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
bye()
x<-paste(LETTERS, 1:4, sep = "-")
y<-matrix(x, 1)
y
y<-matrix(x)
y
y(1)
y[1]
x<-paste(1:10, R, sep".")
x<-paste(1:10, "R", sep".")
x<-paste(1:10, "R", sep=".")
x<-matrix(paste(1:10, "R", sep="."))
x
x[1]
file.create(x[1])
file.remove(x[1])
file.exists(x[1])
x<-paste(1:10, "R", sep=".")
x
x(2)
x(1)
x-as.vector(x)
x-as.matrix(x)
x
x<-matrix(paste(1:10, "R", sep="."))
is.matrix(x)
is.vector(x)
is.character(x[1])
for (i in 1:10) x[i]<-paste(i, "R", sep=".")
x
for (i in 1:10) y[i]<-paste(i, "R", sep=".")
x==y
y
for (i in 1:10) yy[i]<-paste(i, "R", sep=".")
for (i in 1:10) z[i]<-paste(i, "R", sep=".")
z
x
for (i in 1:10) w[i]<-paste(i, "R", sep=".")
w<-matrix(rep(0,10), 10)
for (i in 1:10) w[i]<-paste(i, "R", sep=".")
w
x==w
x=w
x
w<-matrix(rep(0,10), 10)
w
w<-NULL
w
for (i in 1:10) w[i]<-paste(i, "R", sep=".")
w
y<-NULL
y
for (i in 1:10) y[i]<-paste(i, "R", sep=".")
y
y[1]
y[5]
e<-NULL
for (i in 1:10) e[i]<-paste(i, "R", sep=".")
e
e[5]
e[5]=3.R
e[5]=3
e
e[11]=3
e
e[15]=3
e
class(e)
e<-NULL
class(e)
for (i in 1:10) e[i]<-paste(i, "R", sep=".")
is.vector(e)
is.matrix(e)
e[5]
unclass(e)
class(e)
?unclass
e<-NULL
e
length(e)
class(e)
class(e)<-"num"
class(e)<-"numeric"
class(e)
for (i in 1:10) e[i]<-paste(i, "R", sep=".")
e
class(e)
swirl()
x<-c(44, NA, 5, NA)
X*3
x*3
x+10
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_data
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
1/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-(3:9)]
-(3:9)
-3:9
x[-c(2, 10)]
z<-x[is.na(x)]=0
x[is.na(x)]=0
x
seq(1, 10, along.with=letters)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp", "rating","test")
colnames(my_data)<-cnames
my_data
TRuE==TRUE
TRUE==TRUE
(FALSE == TRUE) == FALSE
FALSE == TRUE== FALSE
bye()
library(swirl)
swirl()
6==7
6<7
10<=10
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE
| | c(TRUE, FALSE, FALSE)
TRUE|C(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
play()
isTRUE(3)
isTRUE(NA)
identical('twins', 'twins')
info()
nxt()
identical('twins', 'twins')
xor(5 == 6, !FALSE)
identical(xor, 'xor')
7 == 7.0
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
skip()
submit()
my_mean(c(4,5,10))
submit()
submit()
skip()
skip()
skip()
skip()
skip()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
skip()
evaluate(fun(x)x[1],c(8, 4, 0) )
evaluate(function(x) x[1],c(8, 4, 0) )
evaluate(function(x) x[length(x)],c(8, 4, 0) )
skip()
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
skip()
skip()
mad_libs(list(place=Ng, adjective=nice, noun=pran))
mad_libs(list(place="Nagaon", adjective="nice", noun="pran"))
submit()
"I"%p%"love"%p%"R!"
bye()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
length(unique_'')
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
vapply(flags, unique, numeric
)
vapply(flags, unique, numeric)
vapply(flags, unique, numeric(194))
vapply(flags, range, numeric(194))
ok()
vapply(flags, class, character)
sapply(flags, class)
vapply(flags, class, character(1))
skip()
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
skip()
skip()
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Gr)
table(plants$Active_Growth_Period)
str(plants)
skip()
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = F)
sample(1:20, 10)
LETTERS
play()
sample(c(H,T), 2, replace = T)
sample(c("H","T"), 2, replace = T)
sample(c("H","T"), 2, replace = T)
sample(c("H","T"), 2, replace = T)
sample(c("H","T"), 2, replace = T)
sample(c("H","T"), 2, replace = T)
nxt()
sample(LETTERS)
flips<-sample(c(0,1), prob=c(0.3,0.7), replace = T)
flips<-sample(c(0,1), 100, prob=c(0.3,0.7), replace = T)
flips<-sample(c(0,1), 100,replace, prob=c(0.3,0.7))
flips<-sample(c(0,1), 100,replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom(2, size=100, prob=0.7)
flips2<-rbinom(1, size=100, prob=0.7)
flips2<-rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
flips2<-rbinom(100, size=10, prob=0.7)
flips2
?rnorm
rnorm(10)
rnorm(10, 100, 25)
flips3<-rbinom(100, size=10, prob=0.7)
flips3
bye()
commandArgs()
library(swirl)
swirl()
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
nxt()
info()
main()
skip()
skip
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(dist ~ speed, cars, xlab="speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
swirl()
?swirl
install_from_swirl("Statistical_inference"", dev = FALSE, mirror = "github")
install_from_swirl("Statistical_inference", dev = FALSE, mirror = "github")
swirl()
install_from_swirl("Statistical_Inference", dev = FALSE, mirror = "github")
install_from_swirl("Exploratory_Data_Analysis", dev = FALSE, mirror = "github")
install_from_swirl("Getting_and_Cleaning_Data", dev = FALSE, mirror = "github")
install_from_swirl("Open_Intro/Overview_of_Statistics", dev = FALSE, mirror = "github")
install_from_swirl("R_Programming_Alt", dev = FALSE, mirror = "github")
install_from_swirl("Regression_Models", dev = FALSE, mirror = "github")
install_from_swirl("Data_Analysis", dev = FALSE, mirror = "github")
exit
exit()
quit()
x=1:10
x[1]
x=c(1,na,2,3,na)
x=c(1,NA,2,3,NA)
y=x[x!=NA]
length(y)
y
x
z=x
z
y=x[!is.NA(x)]
y=x[!is.na(x)]
y
length(y)
length(x[!is.na(x)])
x=1
y=5
max(x,y)
min(x,y)
?cor
x<-getwd()
x
cd F:/R
path<-F:R/specdata
path<-F:/R/specdata
path<-"F:/R/specdata"
setwd(path)
ls
ls()
path<-"F:/R/specdata"
setwd("path")
setwd("F:/R/specdata")
ls()
getwd()
